{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('BIGDATA_dr.json','r') as picked_json:\n",
    "    picked = json.load(picked_json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "picked = pd.DataFrame(picked)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('BIGDATA_undr-.json','r') as losers_json:\n",
    "    losers = json.load(losers_json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "losers = pd.DataFrame(losers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([picked,losers],axis = 0,  ignore_index = 'True')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>pos</th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gp</th>\n",
       "      <th>min</th>\n",
       "      <th>pts</th>\n",
       "      <th>fgm</th>\n",
       "      <th>fga</th>\n",
       "      <th>fg%</th>\n",
       "      <th>...</th>\n",
       "      <th>fta</th>\n",
       "      <th>ft%</th>\n",
       "      <th>reb</th>\n",
       "      <th>ast</th>\n",
       "      <th>stl</th>\n",
       "      <th>blk</th>\n",
       "      <th>tov</th>\n",
       "      <th>pf</th>\n",
       "      <th>drafted</th>\n",
       "      <th>draft_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carmelo Anthony</td>\n",
       "      <td>F</td>\n",
       "      <td>203</td>\n",
       "      <td>109</td>\n",
       "      <td>35</td>\n",
       "      <td>36.4</td>\n",
       "      <td>22.23</td>\n",
       "      <td>7.91</td>\n",
       "      <td>17.49</td>\n",
       "      <td>.453</td>\n",
       "      <td>...</td>\n",
       "      <td>6.80</td>\n",
       "      <td>.706</td>\n",
       "      <td>9.74</td>\n",
       "      <td>2.20</td>\n",
       "      <td>1.49</td>\n",
       "      <td>0.86</td>\n",
       "      <td>2.20</td>\n",
       "      <td>2.20</td>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chris Bosh</td>\n",
       "      <td>PF</td>\n",
       "      <td>211</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>31.0</td>\n",
       "      <td>15.71</td>\n",
       "      <td>5.45</td>\n",
       "      <td>9.74</td>\n",
       "      <td>.560</td>\n",
       "      <td>...</td>\n",
       "      <td>5.61</td>\n",
       "      <td>.730</td>\n",
       "      <td>8.97</td>\n",
       "      <td>1.23</td>\n",
       "      <td>0.97</td>\n",
       "      <td>2.13</td>\n",
       "      <td>2.32</td>\n",
       "      <td>2.35</td>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dwyane Wade</td>\n",
       "      <td>SG</td>\n",
       "      <td>193</td>\n",
       "      <td>100</td>\n",
       "      <td>33</td>\n",
       "      <td>32.1</td>\n",
       "      <td>21.52</td>\n",
       "      <td>7.61</td>\n",
       "      <td>15.18</td>\n",
       "      <td>.501</td>\n",
       "      <td>...</td>\n",
       "      <td>7.55</td>\n",
       "      <td>.779</td>\n",
       "      <td>6.33</td>\n",
       "      <td>4.39</td>\n",
       "      <td>2.15</td>\n",
       "      <td>1.30</td>\n",
       "      <td>3.24</td>\n",
       "      <td>2.30</td>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chris Kaman</td>\n",
       "      <td>C</td>\n",
       "      <td>213</td>\n",
       "      <td>120</td>\n",
       "      <td>31</td>\n",
       "      <td>34.0</td>\n",
       "      <td>22.42</td>\n",
       "      <td>7.87</td>\n",
       "      <td>12.65</td>\n",
       "      <td>.622</td>\n",
       "      <td>...</td>\n",
       "      <td>8.90</td>\n",
       "      <td>.750</td>\n",
       "      <td>12.03</td>\n",
       "      <td>1.26</td>\n",
       "      <td>0.61</td>\n",
       "      <td>3.16</td>\n",
       "      <td>4.42</td>\n",
       "      <td>3.19</td>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kirk Hinrich</td>\n",
       "      <td>G</td>\n",
       "      <td>193</td>\n",
       "      <td>86</td>\n",
       "      <td>37</td>\n",
       "      <td>33.5</td>\n",
       "      <td>17.32</td>\n",
       "      <td>6.27</td>\n",
       "      <td>13.19</td>\n",
       "      <td>.475</td>\n",
       "      <td>...</td>\n",
       "      <td>3.38</td>\n",
       "      <td>.704</td>\n",
       "      <td>3.76</td>\n",
       "      <td>3.51</td>\n",
       "      <td>1.86</td>\n",
       "      <td>0.43</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.11</td>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1958</th>\n",
       "      <td>Dru Smith</td>\n",
       "      <td>SG</td>\n",
       "      <td>191</td>\n",
       "      <td>91</td>\n",
       "      <td>107</td>\n",
       "      <td>29.9</td>\n",
       "      <td>11.36</td>\n",
       "      <td>3.74</td>\n",
       "      <td>8.14</td>\n",
       "      <td>.459</td>\n",
       "      <td>...</td>\n",
       "      <td>3.25</td>\n",
       "      <td>.865</td>\n",
       "      <td>3.48</td>\n",
       "      <td>3.76</td>\n",
       "      <td>1.74</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.35</td>\n",
       "      <td>3.01</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1959</th>\n",
       "      <td>D.J. Stewart, Jr.</td>\n",
       "      <td>SG</td>\n",
       "      <td>198</td>\n",
       "      <td>93</td>\n",
       "      <td>64</td>\n",
       "      <td>32.3</td>\n",
       "      <td>12.38</td>\n",
       "      <td>4.44</td>\n",
       "      <td>10.45</td>\n",
       "      <td>.425</td>\n",
       "      <td>...</td>\n",
       "      <td>2.95</td>\n",
       "      <td>.772</td>\n",
       "      <td>2.97</td>\n",
       "      <td>2.34</td>\n",
       "      <td>1.19</td>\n",
       "      <td>0.22</td>\n",
       "      <td>2.28</td>\n",
       "      <td>1.89</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1960</th>\n",
       "      <td>Anthony Tarke</td>\n",
       "      <td>PF</td>\n",
       "      <td>198</td>\n",
       "      <td>100</td>\n",
       "      <td>96</td>\n",
       "      <td>26.5</td>\n",
       "      <td>12.01</td>\n",
       "      <td>4.33</td>\n",
       "      <td>9.61</td>\n",
       "      <td>.451</td>\n",
       "      <td>...</td>\n",
       "      <td>3.99</td>\n",
       "      <td>.593</td>\n",
       "      <td>5.85</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.44</td>\n",
       "      <td>0.91</td>\n",
       "      <td>2.28</td>\n",
       "      <td>2.00</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961</th>\n",
       "      <td>MaCio Teague</td>\n",
       "      <td>PG</td>\n",
       "      <td>193</td>\n",
       "      <td>88</td>\n",
       "      <td>125</td>\n",
       "      <td>33.4</td>\n",
       "      <td>15.54</td>\n",
       "      <td>5.17</td>\n",
       "      <td>11.70</td>\n",
       "      <td>.442</td>\n",
       "      <td>...</td>\n",
       "      <td>3.38</td>\n",
       "      <td>.861</td>\n",
       "      <td>4.38</td>\n",
       "      <td>2.22</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.22</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.32</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1962</th>\n",
       "      <td>Ibi Watson</td>\n",
       "      <td>SG</td>\n",
       "      <td>196</td>\n",
       "      <td>91</td>\n",
       "      <td>100</td>\n",
       "      <td>18.1</td>\n",
       "      <td>7.71</td>\n",
       "      <td>2.69</td>\n",
       "      <td>5.79</td>\n",
       "      <td>.465</td>\n",
       "      <td>...</td>\n",
       "      <td>1.47</td>\n",
       "      <td>.776</td>\n",
       "      <td>2.01</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.95</td>\n",
       "      <td>-1</td>\n",
       "      <td>2021</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1963 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   name pos  height  weight   gp   min    pts   fgm    fga  \\\n",
       "0       Carmelo Anthony   F     203     109   35  36.4  22.23  7.91  17.49   \n",
       "1            Chris Bosh  PF     211     107   31  31.0  15.71  5.45   9.74   \n",
       "2           Dwyane Wade  SG     193     100   33  32.1  21.52  7.61  15.18   \n",
       "3           Chris Kaman   C     213     120   31  34.0  22.42  7.87  12.65   \n",
       "4          Kirk Hinrich   G     193      86   37  33.5  17.32  6.27  13.19   \n",
       "...                 ...  ..     ...     ...  ...   ...    ...   ...    ...   \n",
       "1958          Dru Smith  SG     191      91  107  29.9  11.36  3.74   8.14   \n",
       "1959  D.J. Stewart, Jr.  SG     198      93   64  32.3  12.38  4.44  10.45   \n",
       "1960      Anthony Tarke  PF     198     100   96  26.5  12.01  4.33   9.61   \n",
       "1961       MaCio Teague  PG     193      88  125  33.4  15.54  5.17  11.70   \n",
       "1962         Ibi Watson  SG     196      91  100  18.1   7.71  2.69   5.79   \n",
       "\n",
       "       fg%  ...   fta   ft%    reb   ast   stl   blk   tov    pf drafted  \\\n",
       "0     .453  ...  6.80  .706   9.74  2.20  1.49  0.86  2.20  2.20       1   \n",
       "1     .560  ...  5.61  .730   8.97  1.23  0.97  2.13  2.32  2.35       1   \n",
       "2     .501  ...  7.55  .779   6.33  4.39  2.15  1.30  3.24  2.30       1   \n",
       "3     .622  ...  8.90  .750  12.03  1.26  0.61  3.16  4.42  3.19       1   \n",
       "4     .475  ...  3.38  .704   3.76  3.51  1.86  0.43  2.24  2.11       1   \n",
       "...    ...  ...   ...   ...    ...   ...   ...   ...   ...   ...     ...   \n",
       "1958  .459  ...  3.25  .865   3.48  3.76  1.74  0.40  2.35  3.01      -1   \n",
       "1959  .425  ...  2.95  .772   2.97  2.34  1.19  0.22  2.28  1.89      -1   \n",
       "1960  .451  ...  3.99  .593   5.85  1.80  1.44  0.91  2.28  2.00      -1   \n",
       "1961  .442  ...  3.38  .861   4.38  2.22  1.13  0.22  1.34  1.32      -1   \n",
       "1962  .465  ...  1.47  .776   2.01  0.95  0.27  0.16  0.80  0.95      -1   \n",
       "\n",
       "     draft_year  \n",
       "0          2003  \n",
       "1          2003  \n",
       "2          2003  \n",
       "3          2003  \n",
       "4          2003  \n",
       "...         ...  \n",
       "1958       2021  \n",
       "1959       2021  \n",
       "1960       2021  \n",
       "1961       2021  \n",
       "1962       2021  \n",
       "\n",
       "[1963 rows x 24 columns]"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "fd = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "positions = pd.get_dummies(fd.pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "fd = pd.concat([fd,positions],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fd.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "fd  = fd.drop('draft_year',axis = 1).drop('name',axis = 1).drop('pos',axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "fd,y = fd.drop('drafted',axis = 1),fd['drafted']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>height</th>\n",
       "      <th>weight</th>\n",
       "      <th>gp</th>\n",
       "      <th>min</th>\n",
       "      <th>pts</th>\n",
       "      <th>fgm</th>\n",
       "      <th>fga</th>\n",
       "      <th>fg%</th>\n",
       "      <th>3pm</th>\n",
       "      <th>3pa</th>\n",
       "      <th>...</th>\n",
       "      <th>F-C</th>\n",
       "      <th>F-G</th>\n",
       "      <th>FC</th>\n",
       "      <th>G</th>\n",
       "      <th>G-F</th>\n",
       "      <th>GF</th>\n",
       "      <th>PF</th>\n",
       "      <th>PG</th>\n",
       "      <th>SF</th>\n",
       "      <th>SG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>203</td>\n",
       "      <td>109</td>\n",
       "      <td>35</td>\n",
       "      <td>36.4</td>\n",
       "      <td>22.23</td>\n",
       "      <td>7.91</td>\n",
       "      <td>17.49</td>\n",
       "      <td>.453</td>\n",
       "      <td>1.60</td>\n",
       "      <td>4.74</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>211</td>\n",
       "      <td>107</td>\n",
       "      <td>31</td>\n",
       "      <td>31.0</td>\n",
       "      <td>15.71</td>\n",
       "      <td>5.45</td>\n",
       "      <td>9.74</td>\n",
       "      <td>.560</td>\n",
       "      <td>0.71</td>\n",
       "      <td>1.52</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>193</td>\n",
       "      <td>100</td>\n",
       "      <td>33</td>\n",
       "      <td>32.1</td>\n",
       "      <td>21.52</td>\n",
       "      <td>7.61</td>\n",
       "      <td>15.18</td>\n",
       "      <td>.501</td>\n",
       "      <td>0.42</td>\n",
       "      <td>1.33</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>213</td>\n",
       "      <td>120</td>\n",
       "      <td>31</td>\n",
       "      <td>34.0</td>\n",
       "      <td>22.42</td>\n",
       "      <td>7.87</td>\n",
       "      <td>12.65</td>\n",
       "      <td>.622</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>193</td>\n",
       "      <td>86</td>\n",
       "      <td>37</td>\n",
       "      <td>33.5</td>\n",
       "      <td>17.32</td>\n",
       "      <td>6.27</td>\n",
       "      <td>13.19</td>\n",
       "      <td>.475</td>\n",
       "      <td>2.41</td>\n",
       "      <td>5.92</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   height  weight  gp   min    pts   fgm    fga   fg%   3pm   3pa  ... F-C  \\\n",
       "0     203     109  35  36.4  22.23  7.91  17.49  .453  1.60  4.74  ...   0   \n",
       "1     211     107  31  31.0  15.71  5.45   9.74  .560  0.71  1.52  ...   0   \n",
       "2     193     100  33  32.1  21.52  7.61  15.18  .501  0.42  1.33  ...   0   \n",
       "3     213     120  31  34.0  22.42  7.87  12.65  .622  0.00  0.00  ...   0   \n",
       "4     193      86  37  33.5  17.32  6.27  13.19  .475  2.41  5.92  ...   0   \n",
       "\n",
       "  F-G FC  G G-F GF PF PG SF SG  \n",
       "0   0  0  0   0  0  0  0  0  0  \n",
       "1   0  0  0   0  0  1  0  0  0  \n",
       "2   0  0  0   0  0  0  0  0  1  \n",
       "3   0  0  0   0  0  0  0  0  0  \n",
       "4   0  0  1   0  0  0  0  0  0  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['height', 'weight', 'gp', 'min', 'pts', 'fgm', 'fga', 'fg%', '3pm',\n",
       "       '3pa', '3p%', 'ftm', 'fta', 'ft%', 'reb', 'ast', 'stl', 'blk', 'tov',\n",
       "       'pf', 'C', 'C-F', 'F', 'F-C', 'F-G', 'FC', 'G', 'G-F', 'GF', 'PF', 'PG',\n",
       "       'SF', 'SG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\n",
    "\n",
    "d = scaler.fit_transform(fd)\n",
    "\n",
    "scaled_df = pd.DataFrame(d, columns=fd.columns)\n",
    "scaled_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = scaled_df\n",
    "\n",
    "# X1 = X.drop('fgm',axis = 1).corr()\n",
    "# for col in X1.columns:\n",
    "#     print(col, X1[col].sort_values().apply(lambda x: abs(x))[:3])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [],
   "source": [
    "cl = SGDClassifier(loss= 'log',penalty = 'l2', alpha = 0.001, max_iter=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SGDClassifier(alpha=0.001, loss='log')"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.27667791,  1.44518705, -2.02372436, -0.06800749,  1.1165822 ,\n",
       "         1.29312741, -0.11409011,  2.17801673,  0.48309546, -0.71901035,\n",
       "         1.50469322,  0.39729229, -0.27005067,  1.02044816,  0.75725819,\n",
       "         2.59086742,  0.70481105,  1.86992248, -0.40206601, -1.24015525,\n",
       "        -0.17834892, -0.23133489, -0.03780389, -0.98069508, -0.00987003,\n",
       "         0.10359422, -0.12875746, -0.03360366,  0.50878878, -0.06521248,\n",
       "         0.1764844 ,  0.34219582,  0.50186154]])"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.02762802])"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6893039049235993"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(cl.predict(X_test),y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[255, 121],\n",
       "       [ 63, 150]], dtype=int64)"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(cl.predict(X_test),y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "base_estimator = SGDClassifier()\n",
    "\n",
    "best_model = GridSearchCV( \n",
    "    base_estimator,\n",
    "    param_grid = \n",
    "        {'alpha' : [0.001,0.01,0.1,1],\n",
    "        'loss' : ['log','squared_error','modified_huber'],\n",
    "        'l1_ratio' : [0,0.15,0.3,0.5,0.7,1],\n",
    "         'max_iter' : [1000]},\n",
    "    \n",
    "                        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best_model.fit(X_train,y_train)\n",
    "# pr = best_model.predict(X_test)\n",
    "# accuracy_score(pr,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import  LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=0.4)"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl_1 = LogisticRegression(C=0.4)\n",
    "cl_1.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6876061120543294"
      ]
     },
     "execution_count": 402,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(cl_1.predict(X_test),y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
